<AddIn name        = "C# Binding"
       author      = "Mike Krueger"
       copyright   = "prj:///doc/copyright.txt"
       description = "Backing binding for C#"
       addInManagerHidden = "preinstalled">
	
	<Manifest>
		<Identity name = "ICSharpCode.CSharpBinding"/>
		<!-- The AvalonEdit dependency is necessary for the context action option page -->
		<Dependency addin = "ICSharpCode.AvalonEdit" />
	</Manifest>
	
	<Runtime>
		<Import assembly = "CSharpBinding.dll">
			<Doozer name="CSharpCodeActionProvider" class="CSharpBinding.Refactoring.CSharpCodeActionProviderDoozer"/>
		</Import>
		<Import assembly = ":ICSharpCode.SharpDevelop"/>
		<Import assembly = ":ICSharpCode.NRefactory.CSharp"/>
	</Runtime>
	
	<Path name = "/SharpDevelop/Workbench/Ambiences">
		<Class id    = "C#"
		       class = "ICSharpCode.NRefactory.CSharp.CSharpAmbience"/>
	</Path>
	
	<Path name = "/SharpDevelop/Pads/ProjectBrowser/ContextMenu/ProjectActions/Convert">
		<Condition name = "ProjectActive" activeproject="VBNet">
			<MenuItem id = "VBToCSharpConverter"
			          label = "${res:ICSharpCode.SharpDevelop.Commands.VBConvertProjectToCSharp}"
			          class = "CSharpBinding.VBNetToCSharpConverter"/>
		</Condition>
	</Path>
	
	<Path name = "/SharpDevelop/MSBuildEngine/CompileTaskNames">
		<!-- Makes SharpDevelop show the text 'Compiling ProjectName...' when the task is started -->
		<String id="csc" text = "csc"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/FileFilter">
		<FileFilter id = "C#"
		            insertbefore="AllFiles"
		            name = "${res:SharpDevelop.FileFilter.CSharpFiles}"
		            extensions = "*.cs"
		            mimeType = "text/plain"/>
	</Path>
	
	<Path name = "/SharpDevelop/Workbench/Combine/FileFilter">
		<FileFilter id         = "CSharpProject"
		            insertbefore="AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.CSharpPrjFiles} (*.csproj)"
		            extensions = "*.csproj"/>
	</Path>
	
	<Path name = "/SharpDevelop/Parser">
		<Parser id    = "C#"
		        supportedextensions  = ".cs"
		        projectfileextension = ".csproj"
		        class = "CSharpBinding.Parser.TParser"/>
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/TextEditor/CodeCompletion">
		<CodeCompletionBinding id = "CSharp" extensions = ".cs" class = "CSharpBinding.Completion.CSharpCompletionBinding"/>
	</Path>
	
	<Path name="/SharpDevelop/Workbench/LanguageBindings">
		<LanguageBinding
			id="CSharp"
			class="CSharpBinding.CSharpLanguageBinding"
			extensions=".cs" />
	</Path>
	
	<Path name = "/SharpDevelop/ViewContent/AvalonEdit/SyntaxModes">
		<SyntaxMode id="C#" name="C#" extensions=".cs" resource="CSharpBinding.Resources.CSharp-Semantic.xshd" />
	</Path>
	
	<Path name="/SharpDevelop/ViewContent/AvalonEdit/Highlighters">
		<Highlighter id="CSharpSemantic" extensions=".cs" class="CSharpBinding.CSharpSemanticHighlighter" />
	</Path>
	
	<Path path = "/SharpDevelop/BackendBindings/ProjectOptions/C#">
		<OptionPanel id    = "Application"
		             label = "${res:Dialog.ProjectOptions.ApplicationSettings}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ApplicationSettings"/>
		<OptionPanel id    = "ReferencePaths"
		             label = "${res:Dialog.ProjectOptions.ReferencePaths}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ReferencePaths"/>
		<OptionPanel id    = "Signing"
		             label = "${res:Dialog.ProjectOptions.Signing}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.Signing"/>
		<OptionPanel id    = "BuildEvents"
		             label = "${res:Dialog.ProjectOptions.BuildEvents}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.BuildEvents"/>
		<OptionPanel id    = "BuildOptions"
		             label = "${res:Dialog.ProjectOptions.BuildOptions}"
		             class = "CSharpBinding.OptionPanels.BuildOptions"/>
		<OptionPanel id    = "DebugOptions"
		             label = "${res:Dialog.ProjectOptions.DebugOptions}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.DebugOptions"/>
		<!--<OptionPanel id    = "Publish"
		             label = "${res:Dialog.ProjectOptions.Publish}"
		             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.Publish"/>-->
		<Include id = "AllManaged" path="/SharpDevelop/BackendBindings/ProjectOptions/AllManaged"/>
	</Path>
	
	<Path name = "/Workspace/Icons">
		<!-- C# -->
		<Icon id         = "C#Prj"
		      language   = "C#"
		      resource   = "C#.ProjectIcon"/>
		
		<Icon id         = "C#File"
		      extensions = ".cs"
		      resource   = "C#.FileIcon"/>
	</Path>
	
	<Path path = "/SharpDevelop/Workbench/ProjectBindings">
		<ProjectBinding id                   = "C#"
		                guid                 = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"
		                supportedextensions  = ".cs"
		                projectfileextension = ".csproj"
		                class                = "CSharpBinding.CSharpProjectBinding" />
	</Path>
	
	<Path path = "/SharpDevelop/Dialogs/OptionsDialog/CodingOptions">
		<OptionPanel id    = "C#"
		             insertafter = "Highlighting"
		             label = "C#">
			<OptionPanel id="Issues"
			             label="Code inspection"
			             class="CSharpBinding.Refactoring.IssueOptions"/>
			<ContextActionOptionPanel id="ContextActions" path="/SharpDevelop/ViewContent/TextEditor/C#/ContextActions"/>
		</OptionPanel>
	</Path>
	
	<Path path = "/SharpDevelop/Workbench/MainMenu/Search">
		<MenuItem id = "SearchForIssues"
		          label="Search For Issues..."
		          class="CSharpBinding.Refactoring.SearchForIssuesCommand"/>
	</Path>
	
	<Path path = "/SharpDevelop/ViewContent/TextEditor/C#/IssueProviders">
		<!--<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.AccessToDisposedClosureIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.AccessToModifiedClosureIssue" />-->
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.AssignmentMadeToSameVariableIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.BitwiseOperationOnNonFlagsEnumIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.CallToObjectEqualsViaBaseIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.CallToVirtualFunctionFromConstructorIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.CastExpressionOfIncompatibleTypeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.CompareBooleanWithTrueOrFalseIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.CompareFloatWithEqualityOperatorIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConditionalToNullCoalescingIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConstantConditionIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.CS0127ReturnMustNotBeFollowedByAnyExpression" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.DoubleNegationIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExceptionRethrowIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExplicitConversionInForEachIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExpressionIsAlwaysOfProvidedTypeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExpressionIsNeverOfProvidedTypeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ForControlVariableNotModifiedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.FormatStringIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.IdenticalConditionalBranchIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.InconsistentNamingIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.IncorrectCallToObjectGetHashCodeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.IncorrectExceptionParameterOrderingIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.LocalVariableHidesMemberIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.LocalVariableNotUsedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.MethodNeverReturnsIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.MethodOverloadHidesOptionalParameterIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.MissingStringComparisonIssue" />
		<!--<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.MultipleEnumerationIssue" />-->
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.NegativeRelationalExpressionIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.NotImplementedExceptionIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.OptionalParameterCouldBeSkippedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ParameterCanBeDemotedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ParameterHidesMemberIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ParameterNotUsedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ParameterOnlyAssignedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantArrayInitializerCommaIssue" />
		<!--<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantAssignmentIssue" />-->
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantAttributeParenthesesIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantCaseLabelIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantCatchIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantElseIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantFieldInitializerIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantInternalIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantNamespaceUsageIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantObjectCreationArgumentListIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantObjectOrCollectionInitializerIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantPrivateIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantThisIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantToStringIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantTypeCastIssue" />
		<Class class = "CSharpBinding.Refactoring.SDRedundantUsingIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.RedundantWhereWithPredicateIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ReferenceEqualsCalledWithValueTypeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ReferenceToStaticMemberViaDerivedTypeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ResultOfAsyncCallShouldNotBeIgnoredIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.SimplifyAnonymousMethodToDelegateIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.StaticFieldInGenericTypeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.StringIsNullOrEmptyIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ThreadStaticOnInstanceFieldIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.TypeParameterNotUsedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.UnreachableCodeIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.UseVarKeywordIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.ValueParameterUnusedIssue" />
		<Class class = "ICSharpCode.NRefactory.CSharp.Refactoring.VariableDeclaredInWideScopeIssue" />
		<Class class = "CSharpBinding.Refactoring.CSharpSyntaxIssue" />
	</Path>
	
	<Path path = "/SharpDevelop/ViewContent/TextEditor/C#/ContextActions">
		<!-- In this path, you can add SD context action providers using <Class>,
		     or you can add NR5 code action providers using <CSharpCodeActionProvider> -->
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.AddAnotherAccessorAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.AddCatchTypeAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.AddUsingAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CheckIfParameterIsNullAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertAnonymousDelegateToLambdaAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertAsToCastAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertCastToAsAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertConditionalToIfAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertDecToHexAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertExplicitToImplicitImplementationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertForeachToForAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertHexToDecAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertIfToConditionalAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertIfToSwitchAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertImplicitToExplicitImplementationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertInitializerToExplicitInitializationsAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertLambdaBodyExpressionToStatementAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertLambdaBodyStatementToExpressionAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertLambdaToAnonymousDelegateAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertSwitchToIfAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ConvertToInitializerAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateBackingStoreAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateClassDeclarationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateConstructorDeclarationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateCustomEventImplementationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateDelegateAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateEnumValue" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateEventInvocatorAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateFieldAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateIndexerAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateLocalVariableAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateMethodDeclarationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreateOverloadWithoutParameterAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.CreatePropertyAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.DeclareLocalVariableAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExtensionMethodInvocationToStaticMethodInvocationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExtractAnonymousMethodAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExtractFieldAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod.ExtractMethodAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.FlipOperatorArgumentsAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.GenerateGetterAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.GeneratePropertyAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.GenerateSwitchLabelsAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ImplementAbstractMembersAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ImplementInterfaceAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ImplementInterfaceExplicitAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.InlineLocalVariableAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.InsertAnonymousMethodSignatureAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.IntroduceConstantAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.IntroduceFormatItemAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.InvertIfAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.IterateViaForeachAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.JoinDeclarationAndAssignmentAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.JoinStringAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.MergeNestedIfAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.MoveToOuterScopeAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.NegateRelationalExpressionAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.PutInsideUsingAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.RemoveBackingStoreAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.RemoveBracesAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.RemoveRedundantCatchTypeAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.RemoveRegionAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.ReplaceEmptyStringAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.SortUsingsAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.SplitDeclarationAndAssignmentAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.SplitDeclarationListAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.SplitStringAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.StaticMethodInvocationToExtensionMethodInvocationAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.UseExplicitTypeAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.UseStringFormatAction" />
		<CSharpCodeActionProvider class = "ICSharpCode.NRefactory.CSharp.Refactoring.UseVarKeywordAction" />
		<Class class="CSharpBinding.Refactoring.MoveTypeToFileContextAction" />
	</Path>
</AddIn>
